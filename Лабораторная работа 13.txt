# Отчет по лабораторной работе N 13 по курсу
# "Фундаментальная информатика"


Студент группы: M80-113Б, Агапов Владимир Сергеевич\
Контакты: agapow.volodya2018@gmail.com\
Работа выполнена: 13.03.2022\
Преподаватель: Довженко Анастасия Александровна


## 1. Тема

Основы информатики и алгоритмы структуры данных

## 2. Цель работы

Изучение множеств и операций с ними

## 3. Задание

Вариант №23
На вход подаётся произвольный набор английских слов, разделённых пробелами, запятыми, знаками табуляции и границами строк. Букву 'y' для простоты считать согласной (гласными или согласными бывают звуки, но не буквы). Необходимо проверить выполнение следующего условия: есть ли слово, все согласные которого звонкие {b, v, g, d, z}? При решении задачи необходимо реализовать математическую абстракцию множества (сам тип, полное/пустое множество, пересечение, симметрическая разность и т.д.). 

## 4. Оборудование

Процессор: Intel Core i5-10300H @ 4x 2.5GH\
ОП: 8000 Мб\
SSD: 256 Гб\
Монитор: 1920x1080\

## 5. Программное обеспечение

Операционная система семейства: **Windows**, версия **10**\
Система программирования: **CLion**, версия **2021.3**\

## 6. Идея, метод, алгоритм решения задачи

Записать каждую букву слова в множество\
При переходе на следующее слово выполнить проверку: пересечение исходного множества и множества звонких букв не должно быть пустым, и пересечение исходного множества и множества глухих букв должно быть пустым\

## 7. Сценарий выполнения работы

|№ теста|Ввод|Вывод|
|-------|----|-----|
| 1 | alter ego| Yes |
| 1 | anathemus| No |
| 1 | ayayay| No |
| 1 | AC DC| No |
| 1 | ACDC| No |



## 8. Распечатка протокола

```
#include <stdio.h>
#include <stdint.h>
#include <ctype.h>

#define Set uint64_t
#define EMPTY_SET ((Set) 0UL)

Set set_insert(Set s, char idx)
{
    return s | ((Set) 1UL << (idx - 'a'));
}

Set set_intersection(Set s1, Set s2)
{
    return s1 & s2;
}

Set set_union(Set s1, Set s2)
{
    return s1 | s2;
}

Set set_difference(Set s1, Set s2)
{
    return s1 - (s1 & s2);
}

Set set_symmetric_difference(Set s1, Set s2)
{
    return set_difference(set_union(s1, s2), set_intersection(s1, s2));
}

int main(void)
{
    /*
    char st1[] = "cfhjklmnpqrstwxy";
    Set a = EMPTY_SET;
    for (int i = 0; i < sizeof(st1)-1; ++i) {
        a = set_insert(a, st1[i]);
    }
    printf("%ld", a);
    */
    Set word = EMPTY_SET;
    Set zvonkie = 35651658;
    Set glukhie = 30391972;
    char symbol;
    int res = 0;
    while ((symbol = getc(stdin)) != EOF) {
        if (symbol != ' ' && symbol != '\n' && symbol != ',' && symbol != '\t') {
            symbol = tolower(symbol);
            word = set_insert(word, symbol);
        } else {
            if (set_intersection(word, glukhie) == EMPTY_SET && set_intersection(word, zvonkie) != EMPTY_SET) {
                res = 1;
            }
            word = EMPTY_SET;
        }
    }
    if (word != EMPTY_SET && set_intersection(word, glukhie) == EMPTY_SET && set_intersection(word, zvonkie) != EMPTY_SET) {
        res = 1;
    }
    if (res == 1) {
        printf("Yes\n");
    } else {
        printf("No\n");
    }
    return 0;
}

```

## 9. Дневник отладки

*Должен содержать дату и время сеансов отладки и основные события (ошибки в сценарии и программе, нестандартные ситуации) и краткие комментарии к ним. В дневнике отладки приводятся сведения об использовании других ЭВМ, существенном участии преподавателя и других лиц в написании и отладке программы.*

| №  | Лаб. или дом. | Дата       | Время | Событие                  | Действие по исправлению | Примечание  |
|----|---------------|------------|-------|--------------------------|-------------------------|-------------|
| 1  |


## 10. Замечания автора по существу работы
Нет

## 11. Выводы

Мне  понравилась работа, потому что такая реализация множества довольно интересная
